#! /bin/bash

## Functions ##

is_the_service_running () {
	service_get_status_code=false
	service_get_status_code=$(curl --write-out %{http_code} --silent --output /dev/null http://127.0.0.1:9090)
	if [[ $service_get_status_code = 200 ]]
	then
		service_status="up"
	else
		service_status="down"
	fi
}

is_the_container_running () {
	container_state=false
	container_state=$(docker inspect --format="{{.State.Running}}" cherry-py)
	if $container_state
	then
		container_status="up"
	else
		container_status="down"
	fi
}

is_container_cpu_under_50 () {
	container_cpu_state=$(docker stats cherry-py --format "{{.CPUPerc}}" --no-stream)
	if [[ $container_cpu_state < 50% ]]
	then
		container_cpu_status="okay"
	else
		container_cpu_status="not okay"
	fi
}

is_container_memory_above_50 () {
	container_memory_state=$(docker stats cherry-py --format "{{.MemPerc}}" --no-stream)
	if [[ $container_memory_state < 50% ]]
	then
		container_memory_status="okay"
	else
		container_memory_status="not okay"
	fi
}

logging_status () {
	if [ "$container_status" = "down" ] || [ "$service_status" = "down" ]
	then
		log_level="ERROR"
	elif [ "$container_cpu_status" = "not okay" ] || [ "$container_memory_status" = "not okay" ]
	then
		log_level="WARNING"
	else
		log_level="INFO"
	fi
}

type_to_log () {
	echo "******************** START OF SAMPLE ********************" >> /var/log/watcher_log_file
	echo $log_level >> /var/log/watcher_log_file
	echo "-----------" >> /var/log/watcher_log_file
	echo "Container Status: $container_status, Service Status: $service_status, CPU: $container_cpu_state, Memory: $container_memory_state" >> /var/log/watcher_log_file
	echo "-----------" >> /var/log/watcher_log_file
}

## Program ##

is_the_container_running >> /var/log/watcher_log_file 2>&1
if [ "$container_status" = "up" ]
then
	is_the_service_running >> /var/log/watcher_log_file 2>&1
	is_container_cpu_under_50 >> /var/log/watcher_log_file 2>&1
	is_container_memory_above_50 >> /var/log/watcher_log_file 2>&1
	logging_status
	type_to_log
else
	logging_status
	type_to_log
fi

if [ "$log_level" = "ERROR" ]
then
	docker restart cherry-py >> /var/log/watcher_log_file 2>&1
fi

echo -e "******************** END OF SAMPLE ********************\n\n" >> /var/log/watcher_log_file
